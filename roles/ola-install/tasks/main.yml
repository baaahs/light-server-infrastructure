---

- name: Detect if olad is already installed
  command: which olad
  changed_when: false
  failed_when: false
  register: ola_installed

- name: Get ola version
  shell: "olad -v | awk '{print $4}'"
  register: ola_version_shell_result
  when: ola_installed is succeeded

- set_fact: reported_ola_version="{{ ola_version_shell_result.stdout }}"
  when: ola_installed is succeeded

- name: Install packages required to compile Open Lighting Architecture source
  apt:
    pkg: "{{ item }}"
    state: latest
  with_items:
       - debhelper
       - autotools-dev
       - dh-autoreconf
       - bash-completion
       - libcppunit-dev
       - bison
       - flex
       - pkg-config
       - uuid-dev
       - python
       - python-protobuf
       - python-numpy
       - libprotobuf-dev
       - protobuf-compiler
       - libprotoc-dev
       - libusb-1.0-0-dev
       - libftdi-dev
       - liblo-dev
       - libmicrohttpd-dev
       - libncurses5-dev
  when: (ola_installed is failed) or
        (reported_ola_version != ola_version) or
        (force_reinstall_ola is defined)

- name: download and extract Open Lighting Architecture source code
  unarchive:
    src: 'https://github.com/OpenLightingProject/ola/releases/download/{{ ola_version }}/ola-{{ ola_version }}.tar.gz'
    dest: /tmp
    remote_src: True
  when: (ola_installed is failed) or
        (reported_ola_version != ola_version) or
        (force_reinstall_ola is defined)

- name: Build Open Lighting Architecture source code
  command: '{{ item }}'
  args:
    chdir: '/tmp/ola-{{ ola_version }}'
  with_items:
    - ./configure --enable-python-libs --disable-all-plugins --enable-usbpro
    - make all
    - make install
    - ldconfig
  when: (ola_installed is failed) or
        (reported_ola_version != ola_version) or
        (force_reinstall_ola is defined)

- name: create olad group account
  group:
    name: '{{ ola_user_and_group }}'
    state: present
    system: yes

- name: create olad user account
  user:
    name: '{{ ola_user_and_group }}'
    state: present
    groups: '{{ ola_user_and_group }},dialout'
    system: yes

- name: create olad configuration directory
  file:
    path: /etc/ola
    state: directory
    mode: 'u=rwx,g=rx,o=rx'
    owner: '{{ ola_user_and_group }}'
    group: '{{ ola_user_and_group }}'

- name: install olad server configuration
  template:
    src: ola-server.conf.j2
    dest: /etc/ola/ola-server.conf
    owner: '{{ ola_user_and_group }}'
    group: '{{ ola_user_and_group }}'

- name: install olad usbserial plugin configuration
  template:
    src: ola-usbserial.conf.j2
    dest: /etc/ola/ola-usbserial.conf
    owner: '{{ ola_user_and_group }}'
    group: '{{ ola_user_and_group }}'

- name: install olad systemd file
  template:
    src: olad.j2
    dest: /etc/systemd/system/olad.service

- name: start olad
  systemd:
    name: olad
    enabled: yes
    state: started
    daemon_reload: yes

- name: get list of current, pre-configured dmx universes from OLA
  uri:
    url: 'http://{{ inventory_hostname }}:9090/json/universe_plugin_list'
    method: GET
    return_content: yes
  register: dmx_universes

- name: parse, map universes to their names saved as a list
  set_fact:
    existing_universe_names: "{{ (dmx_universes.content|from_json)['universes'] | map(attribute='name') | list }}"

- name: get list of dmx ports from OLA
  uri:
    url: 'http://{{ inventory_hostname }}:9090/json/get_ports'
    method: GET
    return_content: yes
  register: dmx_ports
  when: dmx_universe_name not in existing_universe_names

- set_fact:
    ultra_dmx_port_id: '{{ item.id }}'
  with_items: '{{ dmx_ports.content }}'
  when:
    - dmx_universe_name not in existing_universe_names
    - item.is_output == True

- fail: msg='Aborting. Please connect the DMXKing ultraDMX micro USB adapter to the Raspberry PI and retry.'
  when:
    - dmx_universe_name not in existing_universe_names
    - ultra_dmx_port_id is undefined

- uri:
    url: 'http://{{ inventory_hostname }}:9090/new_universe'
    method: POST
    body: 'id={{ dmx_universe_id }} &name={{ dmx_universe_name }}&add_ports={{ ultra_dmx_port_id }}'
  when: dmx_universe_name not in existing_universe_names
